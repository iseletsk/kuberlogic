// Code generated by go-swagger; DO NOT EDIT.
package service

import (
	"github.com/go-openapi/runtime/middleware"
	"github.com/kuberlogic/operator/modules/apiserver/internal/generated/models"
	"github.com/kuberlogic/operator/modules/apiserver/internal/generated/security"
	"github.com/kuberlogic/operator/modules/apiserver/internal/logging/posthog"
)

func ServiceListWrapper(srv Service, next ServiceListHandlerFunc) (fn ServiceListHandlerFunc) {
	return func(params ServiceListParams, principal *models.Principal) middleware.Responder {

		log := srv.GetLogger()

		// check auth
		authProvider := srv.GetAuthProvider()
		if authorized, err := authProvider.Authorize(principal.Token, security.ServiceListPermission, "*"); err != nil {
			msg := "auth bad request"
			log.Errorw(msg, "permission", security.ServiceListPermission, "serviceId", "*", "error", err)
			return NewServiceListBadRequest().WithPayload(&models.Error{
				Message: msg,
			})
		} else if !authorized {
			log.Errorw("auth forbidden", "permission", security.ServiceListPermission, "serviceId", "*")
			return NewServiceListForbidden()
		}

		// enqueue data to posthog
		posthogMsg := posthog.NewMessage("service-list")
		if perr := posthogMsg.Create(); perr != nil {
			msg := "could not enqueue posthog message"
			log.Errorw(msg, "error", perr)
			return NewServiceListServiceUnavailable().WithPayload(&models.Error{
				Message: msg,
			})
		}

		return next(params, principal)
	}
}
