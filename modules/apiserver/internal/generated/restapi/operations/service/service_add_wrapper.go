// Code generated by go-swagger; DO NOT EDIT.
package service

import (
	"github.com/go-openapi/runtime/middleware"
	"github.com/kuberlogic/operator/modules/apiserver/internal/generated/models"
	"github.com/kuberlogic/operator/modules/apiserver/internal/generated/security"
	"github.com/kuberlogic/operator/modules/apiserver/internal/logging/posthog"
	"github.com/kuberlogic/operator/modules/apiserver/util"
)

func ServiceAddWrapper(srv Service, next ServiceAddHandlerFunc) (fn ServiceAddHandlerFunc) {
	return func(params ServiceAddParams, principal *models.Principal) middleware.Responder {

		log := srv.GetLogger()

		// build the ServiceID param
		name := params.ServiceItem.Name
		ns := params.ServiceItem.Ns
		serviceId, err := util.JoinID(*ns, *name)
		if err != nil {
			msg := "incorrect service id"
			log.Errorw(msg, "name", name, "ns", ns, "error", err)
			return NewServiceAddBadRequest().WithPayload(&models.Error{
				Message: msg,
			})
		}

		// check auth
		authProvider := srv.GetAuthProvider()
		if authorized, err := authProvider.Authorize(principal.Token, security.ServiceAddPermission, serviceId); err != nil {
			msg := "auth bad request"
			log.Errorw(msg, "permission", security.ServiceAddPermission, "serviceId", serviceId, "error", err)
			return NewServiceAddBadRequest().WithPayload(&models.Error{
				Message: msg,
			})
		} else if !authorized {
			log.Errorw("auth forbidden", "permission", security.ServiceAddPermission, "serviceId", serviceId)
			return NewServiceAddForbidden()
		}

		// enqueue data to posthog
		posthogMsg := posthog.NewMessage("service-add")
		posthogMsg.With("name", params.ServiceItem.Name)
		posthogMsg.With("namespace", params.ServiceItem.Ns)
		posthogMsg.With("type", params.ServiceItem.Type)

		if params.ServiceItem.Replicas != nil {
			posthogMsg.With("replicas", params.ServiceItem.Replicas)
		}

		if params.ServiceItem.Limits != nil && params.ServiceItem.Limits.CPU != nil {
			posthogMsg.With("cpu-limit", params.ServiceItem.Limits.CPU)
		}

		if params.ServiceItem.Limits != nil && params.ServiceItem.Limits.Memory != nil {
			posthogMsg.With("memory-limit", params.ServiceItem.Limits.Memory)
		}

		if params.ServiceItem.Limits != nil && params.ServiceItem.Limits.VolumeSize != nil {
			posthogMsg.With("volume-limit", params.ServiceItem.Limits.VolumeSize)
		}
		if perr := posthogMsg.Create(); perr != nil {
			msg := "could not enqueue posthog message"
			log.Errorw(msg, "error", perr)
			return NewServiceAddServiceUnavailable().WithPayload(&models.Error{
				Message: msg,
			})
		}

		return next(params, principal)
	}
}
