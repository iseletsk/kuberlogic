name: On push master

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    env:
      USE_BUILD: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Cache installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/kuberlogic-installer
          key: installer-${{ github.sha }}

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          restore-keys: |
            docker-cache-

      - name: Build installer & images
        run: |
          make docker-build installer-build

  setup_and_test:
    name: Setup and test
    runs-on: ubuntu-latest
    needs: build
    env:
      USE_BUILD: true
    strategy:
      matrix:
        include:
          - type: postgresql
            pg_version: 13
          - type: mysql
            my_version: 5.7.31

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.19.0'
          kubernetes version: 'v1.20.5'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure logs
        working-directory: ./modules/apiserver/tests
        run: |
          echo Your testid label value is $GITHUB_RUN_ID
          make configure-logs
        env:
          LOGZ_IO_TOKEN: ${{ secrets.LOGZ_IO_TOKEN }}
          LOGZ_IO_LISTENER: ${{ secrets.LOGZ_IO_LISTENER }}

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          skip-save: true
          restore-keys: |
            docker-cache-

      - name: Fake loadbalancer service by installing metallb
        run: |
          helm repo add metallb https://metallb.github.io/metallb
          helm install --set "configInline.address-pools[0].name=default,configInline.address-pools[0].protocol=layer2,configInline.address-pools[0].addresses[0]=198.51.100.0/24" metallb metallb/metallb

      - name: Set kuberlogic context
        run: |
          kubectl config set-context --current --namespace=kuberlogic

      - name: Restore installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/kuberlogic-installer
          key: installer-${{ github.sha }}

      - name: Run installer
        working-directory: ./modules/installer
        run: |
          ./kuberlogic-installer install all -c t.yaml

      - name: Setup minio & create test backet for backup storage
        working-directory: ./modules/apiserver/tests
        run: |
          make deploy-minio create-bucket

      - name: Show pod status
        run: |
          kubectl logs -l app=minio
          docker images
        if: ${{ failure() }}

      - name: Run tests against ready environment
        working-directory: ./modules/apiserver/tests
        run: |
          KUBERLOGIC_KUBECONFIGPATH=${HOME}/.kube/config make remote-test RUN=/$TYPE
        env:
          PG_VERSION: ${{ matrix.pg_version }}
          MY_VERSION: ${{ matrix.my_version }}
          TYPE: ${{ matrix.type }}

      - name: Show status
        run: |
          kubectl get pod,sts,deploy,svc,cj,job -o yaml
        if: ${{ failure() }}

      - name: Generating logs
        working-directory: ./modules/apiserver/tests
        run: |
          kubectl logs -l app.kubernetes.io/instance=kuberlogic-operator --tail=-1 -c manager > kuberlogic-operator.log
          kubectl logs -l app.kubernetes.io/instance=kuberlogic-apiserver --tail=-1 > kuberlogic-apiserver.log

          kubectl get pod --all-namespaces > pods-status.log
          kubectl get endpoints --all-namespaces > endpoints.log
          kubectl get services --all-namespaces > services.log
          kubectl describe kuberlogicservice --all-namespaces > kuberlogic.describe.log

          kubectl logs -l app.kubernetes.io/instance=postgres-operator --tail=-1 > postgres-operator.log
          kubectl logs -l app=mysql-operator -c operator --tail=-1 > mysql-operator.log
          kubectl describe pod -l app.kubernetes.io/instance=postgres-operator > postgres-operator.describe.log
          kubectl describe pod -l app=mysql-operator > mysql-operator.describe.log
          kubectl describe pod -l app.kubernetes.io/name=kuberlogic-alertmanager > alertmanager.describe.log

          kubectl logs -l app.kubernetes.io/name=kube-state-metrics -c kube-state-metrics > kube-state-metrics.logs
          kubectl logs -l app.kubernetes.io/name=kube-state-metrics -c kube-rbac-proxy > kube-rbac-proxy.kube-state-metrics.logs
          kubectl get kuberlogicservice,kuberlogicbackupschedules,kuberlogicbackuprestores --all-namespaces > kuberlogics-services.log
          kubectl describe pod -l app.kubernetes.io/name=mysql --all-namespaces > mysql-cluster.describe.log
          kubectl describe pod -l application=spilo --all-namespaces > pg-cluster.describe.log
          kubectl logs -l app.kubernetes.io/name=mysql -c mysql --tail=-1 > mysql-cluster.log
          kubectl logs -l application=spilo -c postgres --tail=-1 > pg-cluster.log
        if: ${{ always() }}
        continue-on-error: true

      - name: Archive logs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.type }}-${{ matrix.pg_version }}${{ matrix.my_version }}
          path: |
            ./modules/apiserver/tests/*.log
            ./modules/installer/kuberlogic-installer
        if: ${{ always() }}

  release:
    name: Release images
    runs-on: ubuntu-latest
    needs: setup_and_test
    env:
      USE_BUILD: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          skip-save: true
          restore-keys: |
            docker-cache-

      - name: Push the new images
        run: |
          make docker-push

      - name: Restore installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/kuberlogic-installer
          key: installer-${{ github.sha }}

      - name: Release installer
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            ./modules/installer/kuberlogic-installer
